#.rst:
# artool-config
# -------------
#
# :command:`find_package` interface to `artool`.
#
# Finds the ``artool`` executable, and creates the
# :command:`ctr_add_resources` command.

################################################################################
# OpenCTR-Tools - Tools used in the OpenCTR SDK.
#
# Copyright (C) 2015 The OpenCTR Project.
#
# This file is part of OpenCTR-Tools.
#
# OpenCTR-Tools is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3 as published by
# the Free Software Foundation.
#
# OpenCTR-Tools is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License
# along with OpenCTR-Tools. If not, see <http://www.gnu.org/licenses/>.
################################################################################

include(CMakeParseArguments)

set(${CMAKE_FIND_PACKAGE_NAME}_VERSION @PACKAGE_VERSION@)

# Make sure CMake 3.0.0 or later is used.
if(CMAKE_VERSION VERSION_LESS 3.0.0)
    set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE
        "${CMAKE_FIND_PACKAGE_NAME} requires CMake 3.0.0 or later.")
    return()
endif()

#[========================================[.rst:
.. command:: ctr_add_resources

 Transform one or more *binary* resources (including text files)
 info ARM resources - linkable ELF object files, with optional
 features like zlib compression (TODO) and filesystem I/O support
 (TODO) ::

   ctr_add_resources(<OUTPUT> [HEADER <file>] [<ARGN>...])

 ``OUTPUT``
  CMake variable to store the list of generated output files.
 ``HEADER``
  If ``HEADER`` is given, then a file (with filename ``<file>``)
  will be generated to contain a list of all the symbols (See
  below for an example).
 ``ARGN``
  List of binary resource files. 
#]========================================]
function(CTR_ADD_RESOURCES OBJS)
    set(BOOLEANS)
    set(SINGLES HEADER SYMBOL_NAME)
    set(MULTIS)

    cmake_parse_arguments(ARTOOL "${BOOLEANS}" "${SINGLES}" "${MULTIS}" ${ARGN})

    set(ARTOOL_INPUT ${ARTOOL_UNPARSED_ARGUMENTS})

    if(NOT ARTOOL_INPUT)
        message(SEND_ERROR
            "Error: CTR_ADD_RESOURCES called without any input files.")
        return()
    endif()

    if(ARTOOL_SYMBOL_NAME)
        list(LENGTH ARTOOL_INPUT len)
        if(len GREATER 1)
            set(_err "${_err}Error: CTR_ADD_RESOURCES given SYMBOL_NAME, ")
            set(_err "${_err}but there is more than one input file.\n")

            message(SEND_ERROR "${_err}")
            return()
        endif()
    endif()

    if(ARTOOL_HEADER)
        _ctr_write_header_file(status error ${ARTOOL_HEADER} ${ARTOOL_INPUT})
        if(NOT status)
            message(SEND_ERROR "${error}")
            return()
        endif()
    endif()

    # Clear the OBJS list.
    set(${OBJS})

    get_property(ARTOOL_EXECUTABLE TARGET CTR::artool PROPERTY LOCATION)

    # Iterate each input file.
    foreach(f ${ARTOOL_INPUT})
        if(NOT IS_ABSOLUTE ${f})
            get_filename_component(f "${f}" ABSOLUTE)
        endif()

        if(NOT EXISTS ${f})
            message(SEND_ERROR
                "Error: CTR_ADD_RESOURCES input file ${f} does not exist.")
            return()
        endif()

        get_filename_component(BASENAME ${f} NAME_WE)

        list(APPEND ${OBJS} "${CMAKE_CURRENT_BINARY_DIR}/${BASENAME}.o")

        add_custom_command(
            OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/${BASENAME}.o"
            COMMAND ${ARTOOL_EXECUTABLE} "${f}"
                "${CMAKE_CURRENT_BINARY_DIR}/${BASENAME}.o"
            DEPENDS "${f}" "${ARTOOL_EXECUTABLE}"
            COMMENT "Generating ${BASENAME}.o"
        )
    endforeach()

    # Let CMake know these files are generated at compile-time.
    set_source_files_properties(${${OBJS}} PROPERTIES GENERATED TRUE)

    # Pass the OBJS list back to the caller.
    set(${OBJS} ${${OBJS}} PARENT_SCOPE)

endfunction()

# Private internal command. DO NOT USE.
function(_ctr_write_header_file status error output_file input_files)
    if(NOT IS_ABSOLUTE ${output_file})
        set(output_file ${CMAKE_CURRENT_BINARY_DIR}/${output_file})
        get_filename_component(output_file "${output_file}" ABSOLUTE)
    endif()

    if(EXISTS ${output_file})
        file(REMOVE ${output_file})
    endif()

    file(APPEND ${output_file} "/*\n")
    file(APPEND ${output_file} " * Header file containing symbols generated by CTR_ADD_RESOURCES()\n")
    file(APPEND ${output_file} " *\n")
    file(APPEND ${output_file} " * DO NOT EDIT THIS FILE! ANY CHANGES WILL BE DELETED!!!\n")
    file(APPEND ${output_file} " */\n")
    file(APPEND ${output_file} "\n")

    get_filename_component(hname "${output_file}" NAME)
    string(TOUPPER "${hname}" hname)
    string(REPLACE "." "_" hname "${hname}")

    file(APPEND ${output_file} "#ifndef ${hname}\n")
    file(APPEND ${output_file} "#define ${hname}\n")
    file(APPEND ${output_file} "\n")

    foreach(f ${input_files})
        if(NOT IS_ABSOLUTE ${f})
            get_filename_component(f "${f}" ABSOLUTE)
        endif()

        if(NOT EXISTS ${f})
            set(${status} FALSE PARENT_SCOPE)
            set(${error} "Error: CTR_ADD_RESOURCES input file ${f} does not exist." PARENT_SCOPE)
            return()
        endif()

        get_filename_component(fname ${f} NAME)
        string(REPLACE "." "_" fname "${fname}")

        file(APPEND ${output_file} "extern const unsigned char ${fname}[];\n")
        file(APPEND ${output_file} "extern const unsigned int ${fname}_size;\n")
        file(APPEND ${output_file} "\n")
    endforeach()

    file(APPEND ${output_file} "#endif\n")
    set(${status} TRUE PARENT_SCOPE)
endfunction()

# Include the artool targets.
include(${CMAKE_CURRENT_LIST_DIR}/artool-targets.cmake
    OPTIONAL RESULT_VARIABLE ret)
if(NOT ret)
    set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE
        "artool-targets.cmake not found.")
    return()
endif()

# Make sure CTR::artool was exported.
if(NOT TARGET CTR::artool)
    set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE
        "CTR::artool target not found.")
    return()
endif()
