#.rst:
# 3dsxtool-config
# ---------------
# 
# :command:`find_package` interface to `3dsxtool`.
# 
# Finds the ``3dsxtool`` executable, and creates the 
# :command:`ctr_convert_binary` command.
# 
# .. command:: ctr_convert_binary
# 
#  Add a custom rule to convert ELF files into 3DSX after compiling.
#  
#  ::
# 
#    ctr_convert_binary(<TARGET> [OUTPUT <file>])
# 
#  ``TARGET``
#   Target created with :command:`add_executable`. Must be an ARM 
#   ELF Executable. Target will be converted from ELF to 3DSX.
#  ``OUTPUT``
#   By default, the output file is named ``<TARGET>.3dsx``. If 
#   ``OUTPUT`` is given, the output file will be named ``<file>``.
# 

#########################################################################
# OpenCTR-Tools - Tools used in the OpenCTR SDK.
# 
# Copyright (C) 2015 The OpenCTR Project. 
# 
# This file is part of OpenCTR-Tools. 
# 
# OpenCTR-Tools is free software: you can redistribute it and/or modify 
# it under the terms of the GNU General Public License version 3 as 
# published by the Free Software Foundation.
# 
# OpenCTR-Tools is distributed in the hope that it will be useful, 
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License 
# along with OpenCTR-Tools. If not, see <http://www.gnu.org/licenses/>. 
#########################################################################

cmake_minimum_required(VERSION 3.0.0)

include(CMakeParseArguments)

function(CTR_CONVERT_BINARY TGT)
	set(BOOLEAN_OPTIONS)
	set(SINGLE_OPTIONS OUTPUT)
	set(MULTI_OPTIONS)

	cmake_parse_arguments(3DSXTOOL "${BOOLEAN_OPTIONS}" "${SINGLE_OPTIONS}" "${MULTI_OPTIONS}" ${ARGN})

	if(NOT TARGET ${TGT})
		message(SEND_ERROR "Error: CTR_CONVERT_BINART target ${TGT} is not a target.")
		return()
	endif()

	# Working directory
	get_filename_component(BUILD_DIR "$<TARGET_FILE:${TGT}>" DIRECTORY)

	if(3DSXTOOL_OUTPUT)
		if(NOT IS_ABSOLUTE ${3DSXTOOL_OUTPUT})
			get_filename_component(3DSXTOOL_OUTPUT "${3DSXTOOL_OUTPUT}" ABSOLUTE)
		endif()
	else()
		set(3DSXTOOL_OUTPUT "$<TARGET_FILE_DIR:${TGT}>/$<TARGET_FILE_NAME:${TGT}>.3dsx")
	endif()

	add_custom_command(TARGET ${TGT}
		POST_BUILD
		COMMAND ${3DSXTOOL_EXECUTABLE} $<TARGET_FILE:${TGT}> ${3DSXTOOL_OUTPUT}
		WORKING_DIRECTORY $<TARGET_FILE_DIR:${TGT}>
		COMMENT "Generating ${TGT}.3dsx"
	)
endfunction()

set(3DSXTOOL_VERSION @PACKAGE_VERSION@)

@PACKAGE_INIT@

include(${CMAKE_CURRENT_LIST_DIR}/3dsxtool-targets.cmake OPTIONAL)

if(TARGET CTR::3dsxtool)
	get_property(3DSXTOOL_EXECUTABLE TARGET CTR::3dsxtool PROPERTY LOCATION)
endif()

include(${CMAKE_ROOT}/Modules/FindPackageHandleStandardArgs.cmake)

find_package_handle_standard_args(3dsxtool
	FOUND_VAR 3DSXTOOL_FOUND 
	REQUIRED_VARS 3DSXTOOL_EXECUTABLE
	VERSION_VAR ${3DSXTOOL_VERSION}
)
